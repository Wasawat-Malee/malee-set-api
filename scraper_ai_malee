import os
import json
import mimetypes
from typing import List, Union
import google.generativeai as genai

# พยายามโหลดตัวแปรจากไฟล์ .env ถ้ามี (รองรับกรณี GitHub Actions เขียนไฟล์ .env มาให้)
try:
    from dotenv import load_dotenv
    load_dotenv()
except Exception:
    # ถ้าไม่ติดตั้ง python-dotenv ก็ข้ามไป ใช้ env ที่มีอยู่แทน
    pass


def _configure_genai():
    """
    ตั้งค่า Gemini SDK โดยอ่านคีย์จากตัวแปรแวดล้อม GOOGLE_API_KEY
    - ถ้าไม่มีคีย์ จะ raise ข้อผิดพลาด พร้อมข้อความอธิบาย
    """
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        raise RuntimeError(
            "ไม่พบ GOOGLE_API_KEY ใน environment/.env\n"
            "บน GitHub Actions คุณสร้าง .env แล้ว แต่ Python จะไม่โหลดอัตโนมัติ "
            "จึงต้องเรียก load_dotenv() (ทำไว้ให้แล้วด้านบน) "
            "หรือเปลี่ยนไป export เป็น env ด้วย $GITHUB_ENV แทน"
        )
    genai.configure(api_key=api_key)


def _to_image_part(item: Union[str, dict]) -> dict:
    """
    แปลง input แต่ละตัวให้เป็นรูปแบบ 'part' ที่ Gemini เข้าใจ
    รองรับ:
      - str: พาธไฟล์รูปภาพ เช่น 'screenshots/a.png'
      - dict: part ที่เตรียมมาแล้ว เช่น {"mime_type": "image/png", "data": b"..."}
    """
    if isinstance(item, dict):
        # คาดว่า caller เตรียม part มาแล้ว
        if "mime_type" in item and "data" in item:
            return item
        raise TypeError("dict รูปต้องประกอบด้วยคีย์ 'mime_type' และ 'data'")

    if isinstance(item, str):
        # กรณีเป็นพาธไฟล์ -> เดา MIME type แล้วอ่าน bytes
        mime, _ = mimetypes.guess_type(item)
        if not mime:
            # ถ้าเดาไม่ได้ ให้ fallback เป็น image/png
            mime = "image/png"
        with open(item, "rb") as f:
            data = f.read()
        return {"mime_type": mime, "data": data}

    raise TypeError("images ต้องเป็นพาธไฟล์ (str) หรือ part (dict) ที่มี mime_type+data เท่านั้น")


def analyze_images_with_gemini(images: List[Union[str, dict]], prompt: str) -> str:
    """
    ส่งรูปภาพและ Prompt ไปให้ Gemini วิเคราะห์

    พารามิเตอร์:
      - images: รายการรูปภาพ (พาธไฟล์ หรือ part ที่เตรียมไว้แล้ว)
      - prompt: คำสั่ง/คำอธิบายสิ่งที่อยากให้โมเดลทำ

    คืนค่า:
      - สตริงข้อความผลลัพธ์จากโมเดล (cleaned)
    """
    print("กำลังส่งข้อมูลให้ Gemini API วิเคราะห์...")

    # 1) ตั้งค่า SDK ด้วย API คีย์จาก GOOGLE_API_KEY
    _configure_genai()

    # 2) เตรียมโมเดล (ใช้รุ่นเร็ว คุ้มค่า)
    model = genai.GenerativeModel("gemini-1.5-flash-latest")

    # 3) สร้าง content parts: เริ่มด้วย prompt (เป็น text) แล้วตามด้วยรูปทั้งหมดในรูปแบบ part
    parts = [prompt] + [_to_image_part(img) for img in images]

    # 4) เรียกโมเดล (ตั้ง temperature=0 เพื่อลดความสุ่มของผลลัพธ์)
    try:
        response = model.generate_content(
            parts,
            generation_config={"temperature": 0}
        )

        # 5) ดึงผลลัพธ์เป็นข้อความ
        text = (response.text or "").strip()

        # 6) ทำความสะอาดผลลัพธ์: ตัดกรณีที่ตอบเป็นโค้ดบล็อค ```json ... ```
        def _strip_code_fences(s: str) -> str:
            s = s.strip()
            # รองรับทั้ง ```json และ ``` เฉย ๆ
            if s.startswith("```json"):
                s = s[len("```json"):].strip()
            if s.startswith("```"):
                s = s[len("```"):].strip()
            if s.endswith("```"):
                s = s[:-3].strip()
            return s

        cleaned_text = _strip_code_fences(text)
        return cleaned_text

    except Exception as e:
        print(f"เกิดข้อผิดพลาดในการเรียกใช้ Gemini API: {e}")
        return None
